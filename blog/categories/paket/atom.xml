<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: paket | Carolyn Van Slyck]]></title>
  <link href="http://carolynvs.github.io/blog/categories/paket/atom.xml" rel="self"/>
  <link href="http://carolynvs.github.io/"/>
  <updated>2015-08-30T22:54:13-05:00</updated>
  <id>http://carolynvs.github.io/</id>
  <author>
    <name><![CDATA[Carolyn Van Slyck]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Paket: A More Capable Dependency Manager]]></title>
    <link href="http://carolynvs.github.io/blog/2015/08/paket-dependency-manager/"/>
    <updated>2015-08-15T00:00:00-05:00</updated>
    <id>http://carolynvs.github.io/blog/2015/08/paket-dependency-manager</id>
    <content type="html"><![CDATA[<p>Some days I feel like a NuGet apologist. I hear myself saying &ldquo;just wait until NuGet 3, then X will be easy&rdquo;
and then once it comes out, they still missed the mark. Maybe I&rsquo;m just crazy and am using NuGet wrong,
architecting things ass-backward&hellip; but rather than continue fighting with NuGet as it stands today, I&rsquo;ve switched to Paket.</p>

<p><em>Switched to what?</em> <strong><a href="http://fsprojects.github.io/Paket/">Paket</a></strong>, an alternative .NET dependency manager which has some pretty nifty features baked in
that has made me jump ship.</p>

<h2>Better Control over Dependencies</h2>

<p>Paket overall better meets my expectations and desires when it comes to versioning. By default,
Paket attempts to use the most recent available version, which 99% of the time is what I want. Though
you can change that by dropping a <code>!</code> in front of your version constraint to use the
NuGet style pessimistic resolution.</p>

<p>Below are a few examples from the <a href="http://fsprojects.github.io/Paket/nuget-dependencies.html">Paket NuGet Dependencies page</a></p>

<pre><code>nuget Example 1.2.3             // exactly 1.2.3
nuget Example != 1.2.3          // a.k.a NuGet style, exactly 1.2.3, using the min version dependencies
nuget Example &gt;= 1.2.3          // at least 1.2.3
nuget Example &lt; 1.2.3           // less than 1.2.3
nuget Example &gt;= 1.2.3 &lt; 1.5    // at least 1.2.3 but less than 1.5
nuget Example ~&gt; 1.2.3          // 1.2.3 &lt;= x &lt; 1.3
nuget Example ~&gt; 1.2.3-alpha1   // 1.2.3-alpha1 &lt;= x &lt; 1.3
</code></pre>

<h2>Version Free Paths</h2>

<p>By default, Paket doesn&rsquo;t install dependencies into a folder with the version number in the path.
So when I update a dependency, I don&rsquo;t have to dork around with my project files.</p>

<pre><code>packages/cool-dependency/lib/net45/CoolStuff.dll
</code></pre>

<h2>Only Manage Your Immediate Dependencies</h2>

<p>Paket handles your dependencies dependencies for you. Take a look at most projects packages.config file
and you&rsquo;ll see a dozen packages with no distinction between a dependency you care about and everything
else that came along for the ride with that dependency. This means less micromanagement, as you are only
dealing with your direct dependencies.</p>

<h2>The Holy Grail of Wildcard Versions</h2>

<p>So this brings us back to the problem that NuGet couldn&rsquo;t help me with and ultimately caused me to
jump ship to Paket&hellip;</p>

<p><em>How do I keep two closely related packages in sync without micromanaging their versions in lock step?</em></p>

<p>It&rsquo;s not uncommon for me to have a project that relies pretty heavily on another, and they often
are developed in tandem. With NuGet what I always really wanted was wildcard versions,
e.g. <code>1.5.*</code> or just give me the latest damn version without having to change all my packages.config and
csproj files on every new release!</p>

<p>With the above Paket features, this is finally possible! ðŸ˜ƒ</p>

<ol>
<li>Make some breaking changes in ProjectA.</li>
<li>Publish a pre-release version of ProjectA to MyGet.</li>
<li>See the CI build for ProjectB fail because with Paket, my builds are using the latest available version of ProjectA.</li>
<li>Run <code>paket update</code> on my dev machine from within ProjectB and I&rsquo;m in business.
I don&rsquo;t need to edit any additional files to pick up the latest changes.</li>
</ol>


<h2>What about vNext, .NET 5 and Rainbows?!</h2>

<p>I won&rsquo;t lie. I&rsquo;m still closely watching every NuGet release and communication about the new project types shipping
with the next version of .NET (January 2016): file system based, no csproj files, project.json and global.json. The ability to reference
a NuGet package, then by magic detect that the code is on my local machine and use that instead of the package is an <em>extremely</em>
compelling feature. That removes a lot of the friction when developing packages side-by-side,
and if I can somehow do that with Paket, please let me know!</p>

<p>But today? Today I&rsquo;m tired of waiting, apologizing, feature requests closed as &lsquo;won&rsquo;t fix&rsquo; and feeling ignored.
Paket is actively maintained, responsive to the community and addresses NuGet&rsquo;s shortcomings <strong>today</strong>;
so that&rsquo;s what I&rsquo;m going to use.</p>

<p>Heh, if I&rsquo;m coming off a little bitter, well let&rsquo;s just say that I&rsquo;ve wasted a
depressing number of hours struggling to get NuGet to do that little scenario above&hellip; When I stumbled upon Paket,
gave it a go, and it just freaking worked the first time, I laughed and cried at the same time, kicking myself for not discovering it sooner.</p>

<p>So if the Paket devs are reading this, <em>waves</em>, thanks for saving me and my sanity. Keep up the good work.</p>
]]></content>
  </entry>
  
</feed>
