<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vnext | Carolyn Van Slyck]]></title>
  <link href="http://carolynvanslyck.com/blog/categories/vnext/atom.xml" rel="self"/>
  <link href="http://carolynvanslyck.com/"/>
  <updated>2016-08-29T19:20:14-05:00</updated>
  <id>http://carolynvanslyck.com/</id>
  <author>
    <name><![CDATA[Carolyn Van Slyck]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[Publish an ASP.NET website to Carina from the command line]]></title>
    <link href="http://carolynvanslyck.com/blog/2016/02/aspnet-on-carina/"/>
    <updated>2016-02-12T00:00:00-06:00</updated>
    <id>http://carolynvanslyck.com/blog/2016/02/aspnet-on-carina</id>
    <content type="html"><![CDATA[<p>Learn how to <a href="https://getcarina.com/docs/tutorials/publish-aspnet-to-carina/">publish an ASP.NET website to Carina from the command line</a> on Mac OS X, Linux or Windows</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting started with ASP.NET on Carina with Visual Studio]]></title>
    <link href="http://carolynvanslyck.com/blog/2016/02/aspnet-on-carina-with-visual-studio/"/>
    <updated>2016-02-12T00:00:00-06:00</updated>
    <id>http://carolynvanslyck.com/blog/2016/02/aspnet-on-carina-with-visual-studio</id>
    <content type="html"><![CDATA[<p>Learn how to <a href="https://getcarina.com/docs/getting-started/aspnet-on-carina-with-visual-studio/">publish an ASP.NET website to Carina with Visual Studio</a>. Deploying to Docker containers is just a wizard away!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upgrade to .NET vNext]]></title>
    <link href="http://carolynvanslyck.com/blog/2015/01/upgrade-to-net-vnext/"/>
    <updated>2015-01-02T12:13:00-06:00</updated>
    <id>http://carolynvanslyck.com/blog/2015/01/upgrade-to-net-vnext</id>
    <content type="html"><![CDATA[<p>While I have read informal comments from the .NET developers that vNext is intended for new development, I really wanted to upgrade <a href="http://bytesforhealth.com">BytesForHealth</a> to .NET vNext (.NET 5).</p>

<aside>This is just my first step towards migrating, I'm sticking with the .NET Framework and am not making changes to work with .NET Core. Once I get this working, I'll start refactoring to only use Core packages.</aside>

<p>Here are some of the steps I took to upgrade:</p>

<ol>

  <li>Install Visual Studio 2015 Preview.</li>
  
  <li><a href="https://github.com/aspnet/Home#install-the-k-version-manager-kvm">Install KVM</a>.
    <br />
    <pre><code class="list-code">iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/aspnet/Home/master/kvminstall.ps1')"</code></pre></li>
    
  <li>Verify that you are using at least the beta of KPM: <code>kpm --version</code> should return <code>1.0.0-beta1-10662</code>. If not run <code>kvm upgrade</code> to get the latest KRE and then <code>kvm use 1.0.0-beta1 -x86 -r CLR -p</code> to set it as the active version.</li>
  
  <li>Open Visual Studio and create a ASP.NET Class Library (vnext) project. Take that kproj file and copy it into your each of your project directories, name it after the project and if you like overkill, update the project's guid to match the original in the csproj. Now edit your solution file and tweak the project reference to use the kproj file instead of the csproj file and update the project type guids from FAE04EC0-301F-11D3-BF4B-00C04F79EFBC to 8BB2217D-0F2D-49D1-97BC-3654ED321F3B.</li>
  
  <li>Rename packages.config to <a href="https://github.com/aspnet/Home/wiki/Project.json-file">project.json</a>. Add <code>{ "dependencies": {</code> at the top and using some creative find/replace, alter your packages xml to the new json format.
  <br />
  <b>Before</b>
  <pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;packages&gt;
    &lt;package id="AutoMapper" version="2.2.1" targetFramework="net45" /&gt;
    &lt;package id="Microsoft.AspNet.Mvc" version="4.0.20710.0" targetFramework="net45" /&gt;
&lt;/packages&gt;
</code></pre>
<br />
<b>After</b><pre><code>{
  "dependencies": {
    "AutoMapper": "2.2.1",
    "Microsoft.AspNet.Mvc": "4.0.20710.0"
  }
}</code></pre></li>

<li>Using your original csproj, find .NET Framework references (e.g. System.Web, or just look for anything without a packages hintpath), and add them to the frameworkassemblies section in project.json.

<br />
<pre><code>{
  "dependencies": {
    "AutoMapper": "2.2.1",
      "Microsoft.AspNet.Mvc": "4.0.20710.0"
  },
  "frameworks": {
    "net45": {
      "frameworkAssemblies": {
        "System.Web": "4.0.0.0"
      }
    }
  }
}
</code></pre></li>

<li>Using your original csproj file, find project references and add them as dependencies in your project.json file. The name of the dependency will be the name of the project. For example if ProjectA references ProjectB, then it should have the following line in its project.json dependencies section <code>"ProjectB": ""</code>.
<li>Delete your old csproj files.</li>
<li>If all of your source code is in a single directory and at the same level, i.e. not nested, then you can skip this next step. Otherwise you will need to add a global.json to the root of your solution. In order for projects to reference each other when they are not in the same directory, add a hint path for where the projects can be found.
<br />
<pre><code>{
  "sources": ["Src", "Src/ReallyAwesomeStuff", "RandomDir"]
}</code></pre>
&lt;/ol&gt;

You should now be able to build your solution using Visual Studio. You can build individual projects by first running `kpm restore` in the soluiton directory, then by running `kpm build` from within each project directory. If it builds with Visual Studio but not via the command line, review step 3 and make sure you are using the latest version of the KRE.

<aside>
To learn more about building outside of Visual Studio, check out [Building future .NET projects is quite pleasant](http://blog.maartenballiauw.be/post/2014/12/19/Building-future-NET-projects-is-quite-pleasant.aspx) for a breakdown of what the builds currently look like for some of Microsoft's projects on GitHub. It's not quite clear yet if [sake](https://github.com/sakeproject/sake) is going to be the recommended build tool for all .NET projects or if it's only an internal tool; there's very little documentation and guidance at this point and I've seen [musings about open-sourcing msbuild](http://forums.dotnetfoundation.org/t/compiling-net-core-code-on-linux-os-x/302/6)... so things are still up in the air.
</aside>
</li></li></ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KPM Restore Throws AggregateException]]></title>
    <link href="http://carolynvanslyck.com/blog/2015/01/kpm-restore-throws-aggregateexception/"/>
    <updated>2015-01-02T11:32:00-06:00</updated>
    <id>http://carolynvanslyck.com/blog/2015/01/kpm-restore-throws-aggregateexception</id>
    <content type="html"><![CDATA[<p>While I was migrating a legacy codebase from .NET 4.5 to vNext (.NET 5), I started getting this error when restoring my dependencies via <code class="highlighter-rouge">kpm restore</code> or building inside VS 2015.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>System.AggregateException: One or more errors occurred. ---&gt; System.NullReferenceException: Object reference not set to an instance of an object. 
at Microsoft.Framework.PackageManager.Restore.NuGet.PackageFeed.&lt;OpenNuspecStreamAsync&gt;d__1.MoveNext()
</code></pre>
</div>

<p>Turns out there was a trailing space after one of my dependencies, e.g.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nt">"dependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nt">"Microsoft.AspNet.Mvc "</span><span class="p">:</span><span class="w"> </span><span class="s2">"4.0.0.0"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Impression of .NET vNext]]></title>
    <link href="http://carolynvanslyck.com/blog/2014/09/dotnet-vnext-impressions/"/>
    <updated>2014-09-11T00:00:00-05:00</updated>
    <id>http://carolynvanslyck.com/blog/2014/09/dotnet-vnext-impressions</id>
    <content type="html"><![CDATA[<p>When ASP.NET vNext was first announced, I was scratching my head over how it would impact developing .NET in non-Windows environments. There was a lot of hype, snippets of info coming from multiple sources, and nothing I could try out for myself. Well now that the <a href="http://www.visualstudio.com/en-us/downloads/visual-studio-14-ctp-vs.aspx">Visual Studio 2014 CTP</a> is out, I finally can!</p>

<aside>If you have an Azure account, I recommend using their Visual Studio 2014 VM image to test things out without wreaking havoc on your day-to-day machine.</aside>

<p>Here are my first impressions:</p>

<h2 id="what-the-heck-is-it">What the heck is it?</h2>
<p>vNext is Microsoft’s term for the upcoming version of .NET which is based on their new OSS compiler (Roslyn). It includes both plain old .NET and ASP.NET. The goal is to make .NET development easier, truly cross platform and cloud friendly.</p>

<p>To that end, vNext means:</p>

<ul>
  <li>Microsoft’s now includes Mono in their test matrix. Their partnership with Xamarin should help Mono keep pace with .NET development. Xamarin still maintains Mono, and Mono is still the .NET platform for non-Microsoft operating systems.</li>
  <li>An improved development experience outside of Visual Studio. They are adding command line tools, and simplifying project management so that developing in say Sublime on OS X is not only possible but a good experience.</li>
  <li>Decoupling ASP.NET from IIS, System.Web and removes remaining impediments to running .NET websites on Linux.</li>
  <li>Adding the Roslyn compiler and C# 6 goodies.</li>
</ul>

<h2 id="it-is-finally-easy-to-get-up-and-running-on-linuxmac">It is finally easy to get up and running on Linux/Mac!</h2>

<p>You no longer need to build Mono yourself, or wait months for an up-to-date package. WOOHOO! Here are the steps I used (<a href="http://www.mono-project.com/docs/getting-started/install/linux/">taken from the Mono install doc</a>) to install the latest version of Mono (3.8) on Ubuntu.</p>

<script src="https://gist.github.com/carolynvs/4520736f6017ca252a44.js"></script>

<p>Run <code class="highlighter-rouge">mono --version</code> to verify. You should see something like this <code class="highlighter-rouge">Mono JIT compiler version 3.8.0</code>.</p>

<h2 id="worst-naming-ever-k-all-the-things">Worst naming ever, k all the things!</h2>

<p>For some reason, all the new commands and associated concepts start with the letter ‘k’ and god help you if you need to search the web using these terms, they are too generic and often already had another meaning, such as ‘kvm’… <a href="http://weblogs.asp.net/imranbaloch/k-kvm-kpm-klr-kre-in-asp-net-vnext">Read this for an explanation of all the k’s</a>.</p>

<p>On a Windows + Visual Studio environment, learning these commands is not necessary. However if you are targeting cross-platform or would like to develop on a different operating system than what you are running in production, these commands handle everything that previously was performed by msbuild, NuGet, etc.</p>

<ul>
  <li>k - executes commands such as <code class="highlighter-rouge">k run</code> which runs a console application, <code class="highlighter-rouge">k kestrel</code> which starts the Kestrel web server. Think of it as “rake for .NET”. Your project file defines commands <code class="highlighter-rouge">web</code>, <code class="highlighter-rouge">kestrel</code>, <code class="highlighter-rouge">foobar</code> and you use k to execute them.</li>
  <li>kpm - manages dependencies, e.g. <code class="highlighter-rouge">kpm restore</code> to restore dependencies, <code class="highlighter-rouge">kpm build</code> to compile and build your package.</li>
</ul>

<h2 id="bye-bye-iis">Bye Bye IIS</h2>
<p>Previously, if you wanted to use ASP.NET, you had to host on Windows + IIS. Though other frameworks, such as NancyFX, have always worked on Linux/Mono. Now with vNext you can finally use the ASP.NET MVC or WebAPI cross-platform without the IIS requirement.</p>

<p>Just a few options for hosting include:</p>

<p><strong>Self Hosting</strong></p>

<p>Rather than hosting your application in a web server, your process will bind to a port and serve itself directly. To configure add the following to the commands section of your project.json and start your server using <code class="highlighter-rouge">k web</code>.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nt">"dependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">},</span><span class="w">
    </span><span class="nt">"commands"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nt">"web"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Microsoft.AspNet.Hosting --server Microsoft.AspNet.Server.WebListener --server.urls http://localhost:5001"</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
</div>

<p><strong>Helios</strong></p>

<p>Helios is an <a href="http://owin.org/">OWIN</a> web server for IIS. <a href="http://blogs.msdn.com/b/webdev/archive/2014/02/18/introducing-asp-net-project-helios.aspx">Read more about project Helios</a>.</p>

<p><strong>Kestrel</strong></p>

<p>This is a new cross-platform OWIN web server for ASP.NET. It is quite unfortunate that they chose this as the name is already used by the <a href="https://github.com/twitter/kestrel">Kestrel queue framework</a>. Make sure to use “kestrel vNext” when searching for more info on it… To configure add the following to the commands section of your project.json and start your server using <code class="highlighter-rouge">k kestrel</code>.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nt">"dependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">},</span><span class="w">
    </span><span class="nt">"commands"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nt">"kestrel"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Microsoft.AspNet.Hosting --server Kestrel --server.urls http://localhost:5004"</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
</div>

<aside>At the time of writing there is an [open issue](https://github.com/aspnet/KestrelHttpServer/issues/10) with running Kestrel on Linux. ~~What I did to work around it is compile Kestrel (v0.11.29), and copy the resulting libuv.so.1 to ~/.kpm/packages/Microsoft.AspNet.Server.Kestrel/1.0.0-alpha3/native/darwin/universal/libuv.dylib. If you trust me and don't feel like building libuv yourself, [download the file that I built](/downloads/libuv.0.11.29.tar.gz).~~

UPDATE: Here are updated instructions for installing a compatible version of libuv, taken from http://www.ganshani.com/blog/2014/12/shell-script-to-setup-net-on-linux :

    wget http://dist.libuv.org/dist/v1.0.0-rc2/libuv-v1.0.0-rc2.tar.gz
    tar -xvf libuv-v1.0.0-rc2.tar.gz
    cd libuv-v1.0.0-rc2/
    ./gyp_uv.py -f make -Duv_library=shared_library
    make -C out
    sudo cp out/Debug/lib.target/libuv.so /usr/lib/libuv.so.1.0.0-rc2
    sudo ln -s libuv.so.1.0.0-rc2 /usr/lib/libuv.so.1
</aside>

<h2 id="k10-core-clr-cloud-clr-pick-a-name-already">k10, Core CLR, Cloud CLR… pick a name already!</h2>
<p>In keeping with their love of the letter ‘k’, k10, a.k.a Core CLR, a.k.a. Cloud Optimized CLR, is Microsoft’s new .NET Framework. I hear that k10 is a code name and that by the time it releases it will be called “.NET Core Framework” Traditionally the .NET Framework has been optimized for running on a desktop machine. It includes the entire BCL (Base Class Library), had a heavy footprint (200MB), and was not designed with cross-platform concerns in mind. k10’s framework has been broken down into discrete packages, e.g. <code class="highlighter-rouge">System.Runtime</code>, <code class="highlighter-rouge">System.Text.RegularExpressions</code>, allowing you to pick and choose which aspects of the framework you require and deploy them WITH your application, i.e. you do not use a system level .NET Framework installation, instead you are referencing these packages just as you would any NuGet package.</p>

<p>This is a game changer; the most obvious being that it reduces memory usage and start-up times (hence the moniker Cloud Optimized CLR). Even more powerful though is that you can deploy applications to the same server, each providing its own .NET Framework, without affecting one other. A single server could host a legacy application based on the desktop .NET Framework, another application which only pulls in the latest nightly version of ASP.NET vNExt, and perhaps another which uses your own custom build of the .NET Framework.</p>

<p>In both the frameworks, desktop and k10, dependencies on tightly coupled modules such as <code class="highlighter-rouge">System.Web</code>, have been removed to enable cross-platform development. Let’s say you have an existing ASP.NET 4 application that you would like to run on Linux. You would need to upgrade to the latest version of ASP.NET (which is platform agnostic and tested against Mono) but do not need to switch to k10.</p>

<p>Keep in mind that because the entire BCL is not included in k10, existing assemblies will not “just work” with it. Similar to how you could only reference assemblies that were built with the Compact Framework in mind, you cannot reference an assembly from k10 that wasn’t also built for k10. This means that 99% of the packages on NuGet are off-limits for now, severely limiting how quickly or feasibly you could upgrade an existing code-base.</p>

<h2 id="simplified-project-management">Simplified Project Management</h2>
<p>I really like the new project file format, project.json, as it is human readable and doesn’t require an IDE to manage. This file is the master definition of your project, replacing the traditional csproj file. It does not list individual files anymore which is a great improvement in and of itself. It is used to list dependencies, define ‘k’ commands, build configuration, etc. <a href="https://github.com/aspnet/Home/wiki/Project.json-file">Checkout the official doc</a>.</p>

<script src="https://gist.github.com/carolynvs/f9d1a4b4f09542778bf8.js"></script>

<p>Now if you use Visual Studio, you will see that a few extra files are created. Don’t worry, they aren’t necessary or even used on other platforms and appear to simply exist to help Visual Studio work with vNext. They don’t store duplicate data such as references or files. So let VS create them and check in both the <code class="highlighter-rouge">*.kproj</code> and <code class="highlighter-rouge">sln</code> files. Ignore the <code class="highlighter-rouge">ide.sln</code> directory as that contains temporary build artifacts.</p>

<h2 id="final-thoughts">Final Thoughts</h2>
<p>I love developing in C# and I am really excited about where things are heading. Why?</p>

<p>Because my main complaint about ASP.NET is requiring Windows/IIS for hosting.  Now with vNext I’m deploying to Linux which is an environment I am much more comfortable securing, maintaining and licensing.</p>

<p>I think that one day soon, .NET will be a viable cross-platform alternative to Java. A girl can dream, right?</p>

]]></content>
  </entry>
  
</feed>
